<?php

namespace App\Http\Controllers;

use App\Http\Helpers\CsvParser;
use App\Monitor\MaxThreshold;
use App\Server;
use Illuminate\Support\Facades\Log;

class ValuesController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * @param CsvParser $csvParser
     */
    public function store(CsvParser $csvParser)
    {
        /**
         * Iterate through a given directory.
         *
         *
         * @javra-  arid - date
         */
        $parsedData = $this->recursiveDirectoryIterator($csvParser);

        try {
            array_map(function ($initialMap)  {
                $initialMap->map(function ($mappedData)  {
                    //transforming the given data to collection,
                    return collect($mappedData)->map(function ($csvData)  {
                        Log::info('Retrieved the data', $csvData);
                        $server = Server::where('hostname', $csvData['hostname'])->first();
                        $server->addValues($csvData);
                        Log::info('Saved the exported Data');
                    });
                });
            }, $parsedData);
        } catch (\Exception $exception) {
            Log::warning('Could Not Save Data'.$exception->getMessage());
        }
    }

    /**
     * @param Entity $entity
     *
     * @return Entity|\Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function view(Server $server)
    {
        //send the url parameter along to view
        $server['urlParams'] = request()->period;


        switch ($server['urlParams']) {

            case 'last_hour':
                echo 'here';
                return Server::applyFilter('last_hour')->get();
               // return $fetchedData = \DB::select('SELECT * FROM `values` WHERE server_id = '.$server->id.' and created_at >= NOW() - INTERVAL 1 HOUR');


            case 'today':

                return $fetchedData = \DB::select('SELECT HOUR(created_at) as hour, AVG(loadaverage) as loadaverage, AVG(memtotal) as memtotal, AVG(memfree) as memfree, CURDATE() as date, `values`.* FROM `values` WHERE server_id = '.$server->id.' and  DATE(created_at) = CURDATE()  GROUP by hour');


            case 'week':

                return $fetchedData = \DB::select('SELECT DAY(created_at) as days, AVG(loadaverage) as loadaverage, AVG(memtotal) as memtotal, AVG(memfree) as memfree, `values`.* FROM `values` where server_id='.$server->id.' and YEARWEEK(DATE(created_at), 1) = YEARWEEK(CURDATE(), 1) group by days');


            case 'month':

                return $fetchedData = \DB::select('SELECT DAYOFMONTH(created_at) as days_month, AVG(loadaverage) as loadaverage, AVG(memtotal) as memtotal, AVG(memfree) as memfree, `values`.* FROM `values` where server_id='.$server->id.' and MONTH(DATE(created_at)) = MONTH(CURDATE()) group by days_month');


            case 'year':

                return $fetchedData = \DB::select('SELECT MONTH(created_at) as months_years, AVG(loadaverage) as loadaverage, AVG(memtotal) as memtotal, AVG(memfree) as memfree, `values`.* FROM `values` where server_id='.$server->id.' and YEAR(DATE(created_at)) = YEAR(CURDATE()) group by months_years');

            default:

                return $fetchedData = \DB::select('SELECT * FROM `values` WHERE server_id = '.$server->id.' and created_at >= NOW() - INTERVAL 1 HOUR');
        }

        $server['latest_values'] = $fetchedData;

        return view('entities.view', [
            'data' => $server,
        ]);
    }
}
